{
  "version": 3,
  "sources": ["fire.js", "utils.js", "App.js", "serviceWorker.js", "index.js"],
  "names": [
    "firebase",
    "initializeApp",
    "apiKey",
    "authDomain",
    "databaseURL",
    "projectId",
    "storageBucket",
    "messagingSenderId",
    "db",
    "firestore",
    "createGoal",
    "_x",
    "_createGoal",
    "apply",
    "this",
    "arguments",
    "_callee",
    "goal",
    "regenerator_default",
    "a",
    "wrap",
    "_context",
    "prev",
    "next",
    "abrupt",
    "collection",
    "add",
    "Goal",
    "stop",
    "App",
    "_useState",
    "useState",
    "_useState2",
    "Object",
    "slicedToArray",
    "list",
    "setList",
    "useEffect",
    "goals",
    "get",
    "then",
    "snapshot",
    "docs",
    "forEach",
    "doc",
    "push",
    "data",
    "loadGoals",
    "console",
    "log",
    "listGoals",
    "map",
    "item",
    "react_default",
    "createElement",
    "onClick",
    "Boolean",
    "window",
    "location",
    "hostname",
    "match",
    "ReactDOM",
    "render",
    "src_App",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "registration",
    "unregister"
  ],
  "mappings": "8MAaAA,IAASC,cATM,CACXC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,kBAKhB,IAAMC,EAAKR,IAASS,YCApB,SAAeC,EAAtBC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,sDAAO,SAAAC,EAA0BC,GAA1B,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SACIhB,EACFiB,WAAW,SACXC,IAAI,CAACC,KAAM,eAHb,wBAAAN,EAAAO,SAAAZ,6BC2DQa,MArEf,WAAe,IAAAC,EACWC,mBAAS,IADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACAI,EADAJ,EAAA,GAGbK,oBAAU,WACR,IAAMC,EDPH,WACH,IAAIA,EAAQ,GASZ,OARA9B,EAAGiB,WAAW,SACTc,MACAC,KAAK,SAACC,GACHA,EAASC,KAAKC,QAAQ,SAAAC,GAClBN,EAAMO,KAAKD,EAAIE,OAAOnB,UAI3BW,ECHOS,GACdC,QAAQC,IAAI,cAAeX,GAC3BF,EAAQE,IACP,IAMHD,oBAAU,WACRW,QAAQC,IAAI,SAAUd,KAGxB,IAAMe,EAAYf,EAAKgB,IAAI,SAACC,GAAD,OACzBC,EAAAlC,EAAAmC,cAAA,oBAGF,OACED,EAAAlC,EAAAmC,cAAA,WACED,EAAAlC,EAAAmC,cAAA,UAAQC,QAAS,kBAAM7C,MAAvB,YAGA2C,EAAAlC,EAAAmC,cAAA,iBAEAJ,ICrBcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOT,EAAAlC,EAAAmC,cAACS,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC",
  "file": "static/js/main.d8d56f61.chunk.js",
  "sourcesContent": [
    "import firebase from 'firebase'\nimport \"firebase/firestore\"\nimport \"firebase/auth\"\n\nconst config = {\n    apiKey: \"AIzaSyCvxmJXWdOQsBw6QkcH7MTghBk8YjBNnHo\",\n    authDomain: \"track-my-goals.firebaseapp.com\",\n    databaseURL: \"https://track-my-goals.firebaseio.com\",\n    projectId: \"track-my-goals\",\n    storageBucket: \"track-my-goals.appspot.com\",\n    messagingSenderId: \"1045953614271\"\n};\n\nfirebase.initializeApp(config)\n\nexport const db = firebase.firestore()\n\n// export const auth = () => firebase.auth()\n\n// export const mode = \"real\"\n\n// export default fire",
    "import { db } from './fire'\n\nexport function loadGoals() {\n    let goals = []\n    db.collection('Goals')\n        .get()\n        .then((snapshot) => {\n            snapshot.docs.forEach(doc => {\n                goals.push(doc.data().Goal);\n            })\n        })\n\n    return goals;\n}\n\nexport async function createGoal(goal) {\n    return db  \n        .collection('Goals')\n        .add({Goal: 'OWEN GOAL'})\n}\n\n",
    "import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { createGoal, loadGoals } from './utils';\n\n\nfunction App() {\n  const [list, setList] = useState([])\n\n  useEffect(() => {\n    const goals = loadGoals();\n    console.log('mounted app', goals)\n    setList(goals);\n  }, [])\n\n  function addNewGoal() {\n    createGoal({Message: \"Owen message\"})\n  }\n\n  useEffect(() => {\n    console.log('LIST: ', list)\n  })\n\n  const listGoals = list.map((item) => \n    <h1>item</h1>\n  )\n\n  return (\n    <div>\n      <button onClick={() => createGoal()}>\n        Click me\n      </button>\n      <h1>Sup</h1>\n\n     {listGoals}\n    </div>\n  )\n}\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { messages: [] }; // <- set up react state\n//   }\n\n  \n//   addMessage(e){\n//     e.preventDefault(); // <- prevent form submit from reloading the page\n//     /* Send the message to Firebase */\n//     fire.database().ref('messages').push( this.inputEl.value );\n//     this.inputEl.value = ''; // <- clear the input\n\n//     const db = fire.firestore();\n    \n//     const commentRef = db.collection(\"messages\").add({\n//       Message: 'whats up'\n//     });\n\n\n//   }\n//   render() {\n//     return (\n//       <form onSubmit={this.addMessage.bind(this)}>\n//         <input type=\"text\" ref={ el => this.inputEl = el }/>\n//         <input type=\"submit\"/>\n//         <ul>\n//           { /* Render the list of messages */\n//             this.state.messages.map( message => <li key={message.id}>{message.text}</li> )\n//           }\n//         </ul>\n//       </form>\n//     );\n//   }\n// }\n\nexport default App;",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}
