{"version":3,"sources":["fire.js","app-state.js","Day.js","Calendar.js","GoalList.js","appReducer.js","TabsButton.js","DateFields.js","Signup.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firestore","Context","createContext","AppStateProvider","_ref","reducer","_ref$initialState","initialState","children","value","useReducer","react_default","a","createElement","Provider","styled","button","_templateObject","props","completed","_templateObject2","div","_templateObject3","Calendar_templateObject","Calendar_templateObject2","Calendar_templateObject3","_templateObject4","GoalList_templateObject","GoalList_templateObject2","GoalList_templateObject3","input","GoalList_templateObject4","_templateObject5","selected","authAttempted","auth","user","goals","selectedGoal","selectedDays","workout","appStateReducer","state","action","type","console","log","Object","objectSpread","concat","toConsumableArray","newGoal","updatedDays","goal","selectedDay","TabsButton","className","daysInMonth","m","y","DateFields","defaultValue","context","start","end","date","onChange","DateFields_Context","DayField","_useContext","useContext","month","getMonth","year","getFullYear","days","Array","from","length","getDate","assign","event","newDate","Date","getTime","setDate","parseInt","target","map","_","index","key","MonthField","_useContext2","setMonth","YearField","_ref2","rest","objectWithoutProperties","_useContext3","difference","years","setYear","TextInput","id","label","_ref$type","react","es","htmlFor","placeholder","required","SignupForm","_useState","useState","_useState2","slicedToArray","error","_useState3","_useState4","loading","_useState5","_useState6","startDate","setStartDate","message","onSubmit","aria-hidden","aria-label","fa_index_esm","App","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","appReducer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a9d964d.chunk.js","sourcesContent":["import firebase from 'firebase'\nimport \"firebase/firestore\"\nimport \"firebase/auth\"\n\nconst config = {\n    apiKey: \"AIzaSyCvxmJXWdOQsBw6QkcH7MTghBk8YjBNnHo\",\n    authDomain: \"track-my-goals.firebaseapp.com\",\n    databaseURL: \"https://track-my-goals.firebaseio.com\",\n    projectId: \"track-my-goals\",\n    storageBucket: \"track-my-goals.appspot.com\",\n    messagingSenderId: \"1045953614271\"\n};\n\nfirebase.initializeApp(config)\n\nexport const db = firebase.firestore()\n\n// export const auth = () => firebase.auth()\n\n// export const mode = \"real\"\n\n// export default fire","import React, { createContext, useReducer, useContext } from 'react';\n\nconst Context = createContext()\n\nexport function AppStateProvider({ reducer, initialState = {}, children }) {\n    const value = useReducer(reducer, initialState)\n    return <Context.Provider value={value} children={children} />\n}\n\nexport function useAppState() {\n    return useContext(Context);\n}","import React, { useState, useEffect } from \"react\";\nimport { useAppState } from \"./app-state\";\nimport styled from \"styled-components\";\n\nconst monthMap = {\n  0: \"Jan\",\n  1: \"Feb\",\n  2: \"Mar\",\n  3: \"Apr\",\n  4: \"May\",\n  5: \"Jun\",\n  6: \"Jul\",\n  7: \"Aug\",\n  8: \"Sept\",\n  9: \"Oct\",\n  10: \"Nov\",\n  11: \"Dec\"\n};\n\nexport default function Day({ day, month, year }) {\n  const [completed, setCompleted] = useState(false);\n\n  const [{ goals, selectedGoal, selectedDays }, dispatch] = useAppState();\n\n  // useEffect(() => {\n  //   console.log(\n  //     month.toString() +\n  //       \"-\" +\n  //       day.toString().padStart(2, \"0\") +\n  //       \"-\" +\n  //       year.toString()\n  //   );\n  // }, [day, month, year]);\n\n  return (\n    <Button\n      completed={completed}\n      onClick={() => {\n        setCompleted(!completed);\n\n        // UPDATE GLOBAL STATE OF MAPPING OF GOALS TO DATES COMPLETED.\n        // dispatch({\n        //   type: \"DAY_SELECTED\",\n        //   goal: \"workout\",\n        //   selectedDay: \"01-05-19\"\n        // });\n      }}\n    >\n      {day}\n    </Button>\n  );\n}\n\nconst Button = styled.button`\n  display: inline-block;\n  height: 100px;\n  width: 100px;\n  color: ${props => (props.completed ? \"black\" : \"black\")};\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid #5cc7ff;\n  border-radius: 3px;\n  background-color: ${props => (props.completed ? \"#99E897\" : \"white\")};\n`;\n\nconst ClickableDay = styled.button`\n  width: 120px;\n  height: 120px;\n`;\n\nconst CalendarDay = styled.div`\n    width: 150px\n    height: 150px\n    background-color: #dee2e6;\n    top: 0;\n    left: 0;\n    right: 0;\n    display: flex;\n    justify-content: space-between;\n    color: hsl(197, 10%, 45%);\n    font-size: 85%;\n    pointer-events: none;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Day from \"./Day\";\nimport { useAppState } from \"./app-state\";\n\n/**\n * Get the current month. Render all of it's days on the screen. Any\n * leftover days start rendering days for the next month. If the go into\n * the future button is clicked, then set the current month\n */\n\nexport default function Calendar({ startingMonth }) {\n  // The GoalsList sets the Global state's value of selectedDays.\n  // I pull it from the global state here.\n  const [{ selectedDays }, dispatch] = useAppState();\n\n  const [curMonth, setCurMonth] = useState(startingMonth);\n\n  useEffect(() => {\n    console.log(\"MOUNTED NEW CALENDAR\", startingMonth);\n  }, []);\n\n  const monthDays = {\n    \"01\": 31,\n    \"02\": 28,\n    \"03\": 31,\n    \"04\": 30,\n    \"05\": 31,\n    \"06\": 30,\n    \"07\": 31,\n    \"08\": 31,\n    \"09\": 30,\n    \"10\": 31,\n    \"11\": 30,\n    \"12\": 31\n  };\n\n  const monthName = {\n    1: \"January\",\n    2: \"February\",\n    3: \"march\",\n    4: \"April\",\n    5: \"May\",\n    6: \"June\",\n    7: \"July\",\n    8: \"August\",\n    9: \"September\",\n    10: \"October\",\n    11: \"November\",\n    12: \"December\"\n  };\n\n  // On the component mount. Get the current month number, and set it\n  // in local state.\n  useEffect(() => {\n    // var dd = String(today.getDate()).padStart(2, \"0\");\n    // var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n    // var yyyy = today.getFullYear();\n\n    // const curDay = mm + \"/\" + dd + \"/\" + yyyy;\n\n    var today = new Date();\n\n    console.log(\"MOUNTED\");\n    // setCurMonth(today.getMonth() + 1);\n  }, []);\n\n  function getMonth(month) {\n    const myMonth = [[]];\n    let dayOfWeek = 1;\n    let week = [];\n\n    for (let i = 1; i <= monthDays[month]; i++) {\n      if (dayOfWeek === 8) {\n        myMonth.push(week);\n        dayOfWeek = 1;\n        week = [];\n      }\n      // TODO -- INSTEAD OF PASSING JUST PASSING A DAY OF THE MONTH\n      // TO THE DAY COMPONENT, PASS A DD-MM-YYYY TO USE AS AN ID.\n      week.push(<Day day={i} month={parseInt(month)} year={2019} />);\n      dayOfWeek += 1;\n    }\n    myMonth.push(week);\n    return myMonth;\n  }\n\n  function getYear() {\n    const calendarYear = {};\n\n    for (let i = 1; i <= 12; i++) {\n      let monthNum = i.toString();\n      monthNum = monthNum.length === 1 ? \"0\" + monthNum : monthNum;\n\n      const month = getMonth(monthNum);\n\n      calendarYear[i] = month;\n    }\n\n    return calendarYear;\n  }\n\n  // Need to associate a Date with each of these Days\n  // so that I can distinguish the ones that need to be\n  // rendered as selected.\n\n  // On initial load --> get the current month. Use that to\n  // decide how many days / what month to render. Keep the\n  // Month and year in local state, so that I can update it\n  // as the user goes forward and backward in time.\n\n  const calendarYear = getYear();\n\n  return (\n    <Container>\n      <MonthInfo>\n        <Month>{monthName[curMonth]}</Month>\n        <ChangeMonthButton\n          onClick={() => {\n            setCurMonth(curMonth !== 1 ? curMonth - 1 : curMonth);\n          }}\n        >\n          prev month\n        </ChangeMonthButton>\n        <ChangeMonthButton\n          onClick={() => {\n            setCurMonth(curMonth !== 12 ? curMonth + 1 : curMonth);\n          }}\n        >\n          next month\n        </ChangeMonthButton>\n      </MonthInfo>\n      {calendarYear[curMonth].map(week => {\n        return <div>{week}</div>;\n      })}\n    </Container>\n  );\n}\n\nconst Month = styled.div`\n  font-size: 40px;\n`;\n\nconst ChangeMonthButton = styled.button`\n  margin-left: 30px;\n  background: #3498db;\n  width: 180px;\n\n  border-radius: 3px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst MonthInfo = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-left: 1em;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { createGoal } from \"./utils\";\nimport { useAppState } from \"./app-state\";\nimport { GoalsSelectedMap } from \"./MockDB\";\nimport { db } from \"./fire\";\nimport Calendar from \"./Calendar\";\n\nexport default function GoalsList() {\n  const [{}, dispatch] = useAppState();\n\n  const [newGoal, setNewGoal] = useState(\"\");\n  const [goals, setGoals] = useState([]);\n  const [selected, setSelected] = useState(goals[0]);\n  const [goalToMonthMap, setGoalToMonthMap] = useState({});\n\n  async function loadGoals() {\n    db.collection(\"Goals\")\n      .get()\n      .then(snapshot => {\n        const items = [];\n        snapshot.docs.forEach(doc => {\n          items.push(doc.data().goal);\n        });\n\n        setGoals(items);\n      });\n  }\n\n  // Pull the goals from state and set the first one as selected.\n  useEffect(() => {\n    loadGoals();\n  }, []);\n\n  // Whenver a goal is added. Add a mappping of that goal to the current month.\n  // As the user looks to different months on different goals, that will be saved\n  // in state.\n\n  // TODO UPDATE THE goalToMonthMap state whenever the month is changed for\n  // a given goal.\n  useEffect(() => {\n    goals.forEach(goal => {\n      let curMap = goalToMonthMap;\n\n      if (!curMap[goal]) {\n        const today = new Date();\n        curMap[goal] = today.getMonth() + 1;\n      }\n    });\n  }, [goals, goalToMonthMap]);\n\n  useEffect(() => {\n    console.log(\"month map: \", goalToMonthMap);\n  });\n\n  // TODO -- Just render one calendar. Give it props\n  // for completedDays and currentMonth.\n\n  // Keep the mapping of goal to current month in this components\n  // local state.\n\n  return (\n    <OverallContainer>\n      <GoalListContainer>\n        <Input type=\"text\" onChange={e => setNewGoal(e.target.value)} />\n        <Button\n          onClick={() => {\n            if (newGoal.length > 0) {\n              createGoal(newGoal);\n              dispatch({ type: \"GOAL_ADDED\", newGoal });\n              setNewGoal(\"\");\n              setGoals([...goals, newGoal]);\n            }\n          }}\n        >\n          Add goal\n        </Button>\n\n        {goals.map((goal, idx) => {\n          return (\n            <ListRow\n              style={goals[idx + 1] ? null : { borderWidth: \"5px\" }} // Check if it's the last goal in the list.\n              selected={goal === selected}\n              onClick={() => {\n                setSelected(goal);\n                // forceUpdate();\n                const selectedDays = GoalsSelectedMap[goal];\n                // Not hooked to firebase yet. Just mocking the backend\n                dispatch({ type: \"SELECTED_DAYS_LOADED\", selectedDays });\n              }}\n            >\n              {\" \"}\n              {goal}\n            </ListRow>\n          );\n        })}\n      </GoalListContainer>\n\n      <Calendar startingMonth={5} />\n    </OverallContainer>\n  );\n}\n\nconst Button = styled.button`\n  display: inline-block;\n  color: #5cc7ff;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid #5cc7ff;\n  border-radius: 3px;\n  display: inline-block;\n`;\n\nconst GoalListContainer = styled.div`\n  flex-basis: \"33.3%\";\n  max-width: \"33.3%\";\n  padding-right: 10em;\n  padding-left: 6em;\n  padding-top: 6em;\n`;\n\nconst OverallContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-top: 3rem;\n`;\n\nconst Input = styled.input`\n  padding: 0.5em;\n  margin: 0.5em;\n  color: white;\n  background: black;\n  border: none;\n  border-radius: 3px;\n`;\n\nconst ListRow = styled.div`\n  height: 50px;\n  width: 300px;\n  border-width: 5px 5px 0px 5px;\n  border-color: #ff6030;\n  padding-top: 20px;\n  border-style: solid;\n\n  background-color: ${props => (props.selected ? \"#FFE16D\" : \"white\")};\n`;\n","import { retrieveSelectedDays } from \"./utils\";\n\nconst initialState = {\n  authAttempted: false,\n  auth: null,\n  user: null,\n  goals: [\"Workout\", \"Meditate\", \"Eat Healthy\"],\n  selectedGoal: 0,\n\n  // This is the new state I'm adding so that the calendar can dynamically load\n  // the selected days for each component\n\n  // Should probably just load this once on the first page load. And store it\n  // all in local memory.\n\n  // MAKE THIS A MAP OF GOALS TO DAYS SELECTED;\n  selectedDays: {\n    workout: []\n  }\n};\n\nconst appStateReducer = (state, action) => {\n  switch (action.type) {\n    case \"GOALS_LOADED\": {\n      console.log(\"LOADING GOALS: \", action.goals, action.goals[0]);\n      return { ...state };\n    }\n    case \"GOAL_ADDED\": {\n      // IDK IF THIS IS RIGHT. LET'S SEE\n      return { ...state, goals: [...state.goals, action.newGoal] };\n    }\n    case \"SELECTED_DAYS_LOADED\": {\n      return { ...state, selectedDays: action.selectedDays };\n    }\n    case \"DAY_SELECTED\": {\n      // HAVEN'T TESTED THIS LOGIC. PROBABLY NEEDS WORK.\n      const updatedDays = state.selectedDays;\n\n      // Make this a set instead of a list. Don't want duplicate days.\n      updatedDays[action.goal] = [\n        ...updatedDays[action.goal],\n        action.selectedDay\n      ];\n      return { ...state, selectedDays: updatedDays };\n    }\n    default:\n      return state;\n  }\n};\n\nexport { initialState };\nexport default appStateReducer;\n","import React from \"react\";\n\nexport default function TabsButton({ children }) {\n  return (\n    <button className=\"TabsButton icon_button cta\" type=\"submit\">\n      {children}\n    </button>\n  );\n}\n","import React, { createContext, useContext } from \"react\";\n\nconst Context = createContext();\n\n// Thanks!\n// https://stackoverflow.com/questions/1433030/validate-number-of-days-in-a-given-month/1433119#1433119\nexport function daysInMonth(m, y) {\n  switch (m) {\n    case 1:\n      return (y % 4 === 0 && y % 100) || y % 400 === 0 ? 29 : 28;\n    case 8:\n    case 3:\n    case 5:\n    case 10:\n      return 30;\n    default:\n      return 31;\n  }\n}\n\nexport function DateFields({\n  children,\n  defaultValue,\n  start,\n  end,\n  value: controlledValue,\n  onChange\n}) {\n  const date = controlledValue || defaultValue;\n  const context = { date, onChange };\n  return <Context.Provider value={context} children={children} />;\n}\n\nexport function DayField(props) {\n  const { date, onChange } = useContext(Context);\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  const days = Array.from({ length: daysInMonth(month, year) });\n  const value = date.getDate();\n  const handleChange = event => {\n    const newDate = new Date(date.getTime());\n    newDate.setDate(parseInt(event.target.value));\n    onChange(newDate);\n  };\n\n  return (\n    <select value={value} onChange={handleChange} {...props}>\n      {days.map((_, index) => (\n        <option key={index} value={index + 1}>\n          {index < 9 ? \"0\" : \"\"}\n          {index + 1}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nexport function MonthField(props) {\n  const { date, onChange } = useContext(Context);\n  const month = date.getMonth();\n  const handleChange = event => {\n    const newDate = new Date(date.getTime());\n    newDate.setMonth(parseInt(event.target.value));\n    onChange(newDate);\n  };\n\n  return (\n    <select value={month} onChange={handleChange} {...props}>\n      <option value=\"0\">01</option>\n      <option value=\"1\">02</option>\n      <option value=\"2\">03</option>\n      <option value=\"3\">04</option>\n      <option value=\"4\">05</option>\n      <option value=\"5\">06</option>\n      <option value=\"6\">07</option>\n      <option value=\"7\">08</option>\n      <option value=\"8\">09</option>\n      <option value=\"9\">10</option>\n      <option value=\"10\">11</option>\n      <option value=\"11\">12</option>\n    </select>\n  );\n}\n\nexport function YearField({ start, end, ...rest }) {\n  const { date, onChange } = useContext(Context);\n  const difference = end - start + 1;\n  const years = Array.from({ length: difference }).map(\n    (_, index) => index + start\n  );\n  const handleChange = event => {\n    const newDate = new Date(date.getTime());\n    newDate.setYear(parseInt(event.target.value), 1);\n    onChange(newDate);\n  };\n\n  return (\n    <select value={date.getFullYear()} onChange={handleChange} {...rest}>\n      {years.map(year => (\n        <option key={year}>{year}</option>\n      ))}\n    </select>\n  );\n}\n","import React, { Fragment, useState } from \"react\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport TabsButton from \"./TabsButton\";\nimport { FaDumbbell } from \"react-icons/fa\";\nimport { DateFields, MonthField, DayField, YearField } from \"./DateFields\";\n\nfunction TextInput({ id, label, type = \"text\" }) {\n  return (\n    <Fragment>\n      <VisuallyHidden>\n        <label htmlFor={id}>{label}</label>\n      </VisuallyHidden>\n      <input id={id} placeholder={label} type={type} required />\n    </Fragment>\n  );\n}\n\nexport default function SignupForm() {\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [startDate, setStartDate] = useState(new Date(\"March 1, 2019\"));\n\n  // const handleSignup = async event => {\n  //   event.preventDefault()\n  //   setLoading(true)\n  //   const [displayName, photoURL, email, password] = event.target.elements\n  //   try {\n  //     await signup({\n  //       displayName: displayName.value,\n  //       email: email.value,\n  //       password: password.value,\n  //       photoURL: photoURL.value,\n  //       startDate\n  //     })\n  //   } catch (error) {\n  //     setLoading(false)\n  //     setError(error)\n  //   }\n  // }\n\n  return (\n    <div>\n      {error && (\n        <div>\n          <p>Oops, there was an error logging you in.</p>\n          <p>\n            <i>{error.message}</i>\n          </p>\n        </div>\n      )}\n\n      <form onSubmit={null}>\n        <TextInput id=\"displayName\" label=\"Display Name\" />\n        <TextInput id=\"photoURL\" label=\"Avatar URL\" />\n        <TextInput id=\"email\" label=\"Email\" />\n        <TextInput id=\"password\" label=\"Password\" />\n        <p>\n          <span aria-hidden=\"true\">Start:</span>{\" \"}\n          <DateFields value={startDate} onChange={setStartDate}>\n            <MonthField aria-label=\"Start Month\" /> /{\" \"}\n            <DayField aria-label=\"Start Day\" /> /{\" \"}\n            <YearField start={2018} end={2019} aria-label=\"Start year\" />\n          </DateFields>\n        </p>\n        <TabsButton>\n          <FaDumbbell />\n          <span>{loading ? \"Loading...\" : \"Sign Up\"}</span>\n        </TabsButton>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport GoalsList from \"./GoalList\";\nimport styled from \"styled-components\";\nimport { AppStateProvider } from \"./app-state\";\nimport appReducer, { initialState } from \"./appReducer\";\nimport SignupForm from \"./Signup\";\n\nfunction App() {\n  return (\n    // <AppContainer>\n    //   <GoalsList />\n    // </AppContainer>\n    <SignupForm />\n  );\n}\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  background-color: #efe2ba;\n  height: 100%;\n  width: auto;\n`;\n\nexport default () => (\n  <AppStateProvider reducer={appReducer} initialState={initialState}>\n    <App />\n  </AppStateProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}